- name: "Playbook system"
  hosts: all
  become: true
  tasks:
    - name: Upgrade all apt packages
      apt: upgrade=dist force_apt_get=yes
    
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
    
    - name: Make sure cloud-init is disabled
      apt: name=cloud-init state=absent
    
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present
    
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'
    
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ lookup('env', 'ADMIN_USER') }}"
        password: "{{ lookup('env', 'ADMIN_PASS') }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/zsh
    
    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ lookup('env', 'ADMIN_USER') }}"
        state: present
        key: "{{ lookup('env', 'ADMIN_SSHKEY') }}"
    
    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
    
    - name: Download grml .zshrc to /etc/skel
      get_url:
        url: https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc
        dest: /etc/skel/.zshrc
        mode: 0444
    
    - name: Download grml .zshrc.local to /etc/skel
      get_url:
        url: https://git.grml.org/f/grml-etc-core/etc/skel/.zshrc
        dest: /etc/skel/.zshrc.local
        mode: 0444
    
    # Install Packages
    - name: Update apt
      apt: update_cache=yes
    
    - name: Install required system packages
      apt: name="{{ sys_packages.split() }}" state=latest
    
    # UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH
    
    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming
    
    - name: Check if a reboot is needed
      notify: reboot system
      stat: path=/var/run/reboot-required get_md5=no
  handlers:
    - name: reboot system
      reboot:
        msg: "Reboot initiated by Ansible due to system-updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
  vars:
    sys_packages: "{{ lookup('env', 'SYSTEM_PACKAGES') }}"
