- name: Set up all OS properties
  gather_facts: false
  hosts: all
  become: true
  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest

    - name: Upgrade all apt packages
      apt: upgrade=dist update_cache=yes
    
    - name: Make sure cloud-init is disabled
      apt: name=cloud-init state=absent
    
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present
    
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'
    
    - name: Disable remote login for root
      register: sshd_conf
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: Disable password authentication in general
      register: sshd_conf
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'

    - name: Disable first time login user
      ignore_errors: yes
      user:
        name: "{{ lookup('env', 'DEFAULT_USER') }}"
        state: absent
        remove: yes

    - name: Download grml .zshrc to /etc/skel
      get_url:
        url: https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc
        dest: /etc/skel/.zshrc
        mode: 0444

    - name: Create .hushlogin in /etc/skel to disable MOTD
      file:
        path: /etc/skel/.hushlogin
        state: touch

    - name: Download grml .zshrc.local to /etc/skel
      get_url:
        url: https://git.grml.org/f/grml-etc-core/etc/skel/.zshrc
        dest: /etc/skel/.zshrc.local
        mode: 0444

    - name: Set hostname
      hostname:
        name: "{{ lookup('env', 'RHOSTNAME') }}"
    
    - name: Install required system packages
      apt: name="{{sys_packages.split()}}" state=latest update_cache=yes
    
    - name: Restart ssh daemon
      service:
        name: ssh
        state: restarted
        use: service
      when: sshd_conf.changed

    - name: Check if a reboot is required
      shell: "[ -f /var/run/reboot-required ]"
      failed_when: False
      register: reboot_required
      changed_when: reboot_required.rc == 0
      notify: reboot

  handlers:
    - name: reboot
      reboot:
        msg: "Reboot initiated by Ansible due to system-updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

    - name: restart sshd
      service: name=ssh state=restarted
  vars:
    sys_packages: "{{ lookup('env', 'SYSTEM_PACKAGES') }}"
